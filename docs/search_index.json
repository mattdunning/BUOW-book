[["index.html", "BUOW Data Visualizations Chapter 1 About 1.1 Usage", " BUOW Data Visualizations Matthew Dunning 2024-12-10 Chapter 1 About This book was originally written to document efforts taken to proof and consolidate all burrowing owl data from the Conway lab. Future uses will include generating figures and maps. 1.1 Usage Each bookdown chapter includes the steps taken to clean data sheets and then import into SQLlite. The code only needs to be run once so the purpose of publishing it is to reference how a task was completed for future database cleaning projects. "],["cleaning-band-data-2000-2019.html", "Chapter 2 Cleaning Band Data 2000-2019 2.1 Cleaning Band 2.2 Load packages 2.3 Add hyphens in the correct locations 2.4 Fix some capitalization issues 2.5 Proofing resights 2.6 Clean the sex column 2.7 Now clean the USGS band info 2.8 ACRAFT specific cleaning 2.9 Color band sorting 2.10 Get the rest of the bands that have neither ACRAFT nor Color bands 2.11 Finally remove all unneccessary dataframes and objects to keep environment tidy", " Chapter 2 Cleaning Band Data 2000-2019 2.1 Cleaning Band This section is to clean all burrowing data from 2000 - July 2024. This section is only focused on getting options(repos = c(CRAN = &quot;https://cran.rstudio.com/&quot;)) install.packages(&quot;tidyverse&quot;) install.packages(&quot;readxl&quot;) install.packages() 2.2 Load packages load packages needed library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 4.4.2 ## Warning: package &#39;ggplot2&#39; was built under R version 4.4.2 ## ── Attaching core tidyverse packages ───────────────────────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ─────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(readxl) First lets clean the data from 2000-2019. First lets import the data into r and then create a new data frame with only the needed columns. setwd(&quot;~/BUOW_Migration-Maps/data&quot;) BUOW1 &lt;- read_csv(&quot;BUOW_Data2000-2019.csv&quot;) ## New names: ## • `comments` -&gt; `comments...93` ## • `comments` -&gt; `comments...103` ## • `` -&gt; `...104` ## Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 12353 Columns: 104 ## ── Column specification ───────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (55): band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSe... ## dbl (47): individualID, burrow_number, year, bird_wt, left_wing, left_metat... ## lgl (1): comments...93 ## time (1): time_at_release ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. bands &lt;- select(BUOW1, band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSecondCode, AcraftLeg, right_top, right_bottom, left_top, left_bottom, sex) 2.3 Add hyphens in the correct locations First we need to add some criteria and conditions #first need to add several criteria and conditions criteria1 &lt;- &quot;0844&quot; criteria2 &lt;- &quot;0934&quot; #some bands already had a dash so now there is -- criteria3 &lt;- &quot;804&quot; criteria4 &lt;- &quot;1204&quot; criteria5 &lt;- &quot;764&quot; criteria6 &lt;- &quot;544&quot; criteria7 &lt;- &quot;574&quot; criteria8 &lt;- &quot;594&quot; criteria9 &lt;- &quot;914&quot; criteria10 &lt;- &quot;1005&quot; criteria11 &lt;- &quot;934&quot; #some bands already had a dash so now there is -- criteria12 &lt;- &quot;844&quot; Condition1 &lt;- grepl(&quot;^AL-&quot;, bands$band) criteria &lt;- c(criteria1, criteria2, criteria4, criteria10) criteriax &lt;- c(criteria11, criteria12, criteria3, criteria5, criteria6, criteria7, criteria8, criteria9) Next run the code practice_band &lt;- bands %&gt;% mutate(band = case_when( substr(band, 1, 4) %in% criteria ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 4), &quot;-&quot;, substr(clean_band, 5, nchar(clean_band))) }, TRUE ~ band # Keep original band if no criteria match )) %&gt;% mutate(band = case_when( substr(band, 1, 3) %in% criteriax ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 3), &quot;-&quot;, substr(clean_band, 4, nchar(clean_band))) }, TRUE ~ band # Keep original band if no criteria match )) %&gt;% mutate(band =ifelse(Condition1, substr(band, 4, nchar(band)), band) ) remove the criteria and conditions to keep the r environment tidy remove(criteria, criteria1, criteria2, criteria3, criteria4, criteria5, criteria6, criteria7, criteria8, criteria9, criteria10, criteria11, criteria12, criteriax, Condition1) 2.4 Fix some capitalization issues practice_band &lt;- practice_band %&gt;% mutate(acraftSecondCode = str_replace_all(acraftSecondCode, &quot;w&quot;, &quot;W&quot;) ) practice_band &lt;- practice_band %&gt;% mutate(left_top = str_replace_all(left_top, &quot;E&quot;, &quot;e&quot;) ) 2.5 Proofing resights This code can be used to proof the resights columns_to_check &lt;- c(&quot;USGSLeg&quot;, &quot;acraftColor&quot;, &quot;acraftFirstCode&quot;, &quot;acraftType&quot;, &quot;acraftSecondCode&quot;, &quot;AcraftLeg&quot;, &quot;right_top&quot;, &quot;right_bottom&quot;, &quot;left_top&quot;, &quot;left_bottom&quot; ) repeating_values &lt;- practice_band %&gt;% group_by(band) %&gt;% filter(any(sapply(columns_to_check, function(col) n_distinct(get(col)) &gt; 1))) %&gt;% ungroup() #values that have contradictory info about band position should be edited #values that are U and M/F/J/UA should default to M/F 2.6 Clean the sex column #First make all other values U practice_band &lt;- practice_band %&gt;% mutate( sex = case_when( sex %in% c(&quot;J&quot;, &quot;UA&quot;) ~ &quot;U&quot;, # Replace &quot;J&quot; and &quot;UA&quot; with &quot;U&quot; is.na(sex) ~ &quot;U&quot;, # Replace NA with &quot;U&quot; TRUE ~ sex # Keep all other values unchanged ) ) #Make all bands that contain both M and F into C. This also makes U a C in these cases. bands_with_both &lt;- practice_band %&gt;% filter(sex %in% c(&quot;M&quot;, &quot;F&quot;)) %&gt;% # Filter rows with &quot;M&quot; or &quot;F&quot; group_by(band) %&gt;% # Group by band filter(n_distinct(sex) == 2) %&gt;% # Ensure the band contains both &quot;M&quot; and &quot;F&quot; ungroup() %&gt;% # Ungroup after filtering pull(band) # Extract the band names # Step 2: Replace &quot;M&quot;, &quot;F&quot;, and &quot;U&quot; with &quot;C&quot; only for bands that contain both &quot;M&quot; and &quot;F&quot; practice_band &lt;- practice_band %&gt;% mutate( sex = case_when( band %in% bands_with_both &amp; sex %in% c(&quot;M&quot;, &quot;F&quot;, &quot;U&quot;) ~ &quot;C&quot;, # Replace &quot;M&quot;, &quot;F&quot;, &quot;U&quot; with &quot;C&quot; if band has both &quot;M&quot; and &quot;F&quot; TRUE ~ sex # Leave all other values unchanged ) ) #changes MU and FU combos to M or F bands_with_m_u &lt;- practice_band %&gt;% filter(sex %in% c(&quot;M&quot;, &quot;U&quot;)) %&gt;% # Focus on &quot;M&quot; and &quot;U&quot; group_by(band) %&gt;% filter(any(sex == &quot;M&quot;) &amp; any(sex == &quot;U&quot;)) %&gt;% # Band must have both &quot;M&quot; and &quot;U&quot; ungroup() %&gt;% pull(band) # Extract the band names bands_with_f_u &lt;- practice_band %&gt;% filter(sex %in% c(&quot;F&quot;, &quot;U&quot;)) %&gt;% # Focus on &quot;F&quot; and &quot;U&quot; group_by(band) %&gt;% filter(any(sex == &quot;F&quot;) &amp; any(sex == &quot;U&quot;)) %&gt;% # Band must have both &quot;F&quot; and &quot;U&quot; ungroup() %&gt;% pull(band) # Extract the band names # Step 2: Mutate the sex column to replace &quot;U&quot; with &quot;M&quot; or &quot;F&quot; based on the logic above practice_band &lt;- practice_band %&gt;% mutate( sex = case_when( band %in% bands_with_m_u &amp; sex == &quot;U&quot; ~ &quot;M&quot;, # If band has both &quot;M&quot; and &quot;U&quot;, change &quot;U&quot; to &quot;M&quot; band %in% bands_with_f_u &amp; sex == &quot;U&quot; ~ &quot;F&quot;, # If band has both &quot;F&quot; and &quot;U&quot;, change &quot;U&quot; to &quot;F&quot; TRUE ~ sex # Otherwise, keep the original value of sex ) ) 2.7 Now clean the USGS band info # Update the USGSLeg values to &quot;C&quot; if both &quot;Right&quot; and &quot;Left&quot; are present in the same band bands_to_change &lt;- practice_band %&gt;% group_by(band) %&gt;% filter(any(USGSLeg == &quot;Right&quot;) &amp; any(USGSLeg == &quot;Left&quot;)) %&gt;% pull(band) # Extract the band names that meet the condition # Now mutate &#39;USGSLeg&#39; to &quot;C&quot; for the identified bands practice_band &lt;- practice_band %&gt;% mutate( USGSLeg = if_else( band %in% bands_to_change, # Check if the band is in the list of bands to change &quot;C&quot;, # Change to &quot;C&quot; USGSLeg # Otherwise, keep original value ) ) #change the NA to right/left in USGSLeg bands_to_fix &lt;- practice_band %&gt;% group_by(band) %&gt;% filter(any(is.na(USGSLeg)) &amp; any(USGSLeg == &quot;Right&quot;)) %&gt;% # Check for bands with both NA and &quot;Right&quot; ungroup() %&gt;% pull(band) # Extract the band names that meet the condition # Step 2: Apply the changes to &#39;USGSLeg&#39; for these identified bands practice_band &lt;- practice_band %&gt;% group_by(band) %&gt;% mutate( USGSLeg = case_when( band %in% bands_to_fix &amp; is.na(USGSLeg) &amp; any(USGSLeg == &quot;Right&quot;) ~ &quot;Right&quot;, # Replace NA with &quot;Right&quot; if &quot;Right&quot; exists in the band TRUE ~ USGSLeg # Keep other values unchanged ) ) %&gt;% ungroup() # Ungroup after applying the update #Now the Left Leg bands_to_fix &lt;- practice_band %&gt;% group_by(band) %&gt;% filter(any(is.na(USGSLeg)) &amp; any(USGSLeg == &quot;Left&quot;)) %&gt;% # Check for bands with both NA and &quot;Left&quot; ungroup() %&gt;% pull(band) # Extract the band names that meet the condition # Step 2: Apply the changes to &#39;USGSLeg&#39; for these identified bands practice_band &lt;- practice_band %&gt;% group_by(band) %&gt;% mutate( USGSLeg = case_when( band %in% bands_to_fix &amp; is.na(USGSLeg) &amp; any(USGSLeg == &quot;Left&quot;) ~ &quot;Left&quot;, # Replace NA with &quot;Left&quot; if &quot;Left&quot; exists in the band TRUE ~ USGSLeg # Keep other values unchanged ) ) %&gt;% ungroup() # Ungroup after applying the update 2.8 ACRAFT specific cleaning First we only want to pull the bands that have ACRAFT bands associated with them. #Lets make all NA values say &quot;no auxiliary band&quot; bands_to_fix &lt;- practice_band %&gt;% group_by(band) %&gt;% filter(any(acraftType == &quot;no auxiliary band&quot;) &amp; any(is.na(acraftType))) %&gt;% pull(band) # Apply the change to the acraftType column practice_band &lt;- practice_band %&gt;% group_by(band) %&gt;% mutate( acraftType = case_when( band %in% bands_to_fix &amp; is.na(acraftType) ~ &quot;no auxiliary band&quot;, # Replace NA with &quot;no auxiliary band&quot; where necessary TRUE ~ acraftType # Keep other values unchanged ) ) %&gt;% ungroup() # Remove grouping after applying the changes #filter only the columns we want for ACRAFT bands acraft &lt;- practice_band %&gt;% select(band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSecondCode, AcraftLeg, sex) %&gt;% filter(acraftType != &quot;no auxilary&quot;) %&gt;% filter(acraftType != &quot;no auxiliary band&quot;) %&gt;% filter(acraftType != &quot;plastic&quot;) %&gt;% filter(!is.na(acraftType)) #Remove all duplicate bands from recapture events distinct_bands_all_columns &lt;- acraft %&gt;% distinct(band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSecondCode, AcraftLeg, sex) acraft &lt;- distinct_bands_all_columns %&gt;% mutate(left_leg = case_when( grepl(&quot;Left&quot;, AcraftLeg, ignore.case = TRUE) ~ &quot;Acraft&quot;, # If &quot;Left&quot; in AcraftLeg, set &#39;Acraft&#39; grepl(&quot;Left&quot;, USGSLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Left&quot; in USGSLeg, set &#39;USGS&#39; is.na(USGSLeg) ~ NA_character_, # Leave NA as NA if USGSLeg is NA TRUE ~ as.character(USGSLeg) # Leave other values unchanged (like &quot;Right&quot;) )) acraft &lt;- acraft %&gt;% mutate(right_leg = case_when( grepl(&quot;Right&quot;, AcraftLeg, ignore.case = TRUE) ~ &quot;Acraft&quot;, # If &quot;Right&quot; in AcraftLeg, set &#39;Acraft&#39; grepl(&quot;Right&quot;, USGSLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Right&quot; in USGSLeg, set &#39;USGS&#39; is.na(USGSLeg) ~ NA_character_, # Leave NA as NA if USGSLeg is NA TRUE ~ as.character(USGSLeg) # Leave other values unchanged (like &quot;Left&quot;) )) #export the acraft bands as a data frame to be added to database export_acraft &lt;- acraft %&gt;% rename( BUOW_USGS_ID = band, ACRAFT_color = acraftColor, ACRAFT_first_code = acraftFirstCode, ACRAFT_second_code = acraftSecondCode, ACRAFT_layout = acraftType ) export_acraft &lt;- export_acraft %&gt;% select( BUOW_USGS_ID, left_leg, right_leg, ACRAFT_color, ACRAFT_first_code, ACRAFT_layout, ACRAFT_second_code, sex, ) 2.9 Color band sorting #first select the columns needed for color bands color_bands &lt;- practice_band %&gt;% select(band, USGSLeg, acraftType, right_top, right_bottom, left_top, left_bottom, sex) %&gt;% filter(acraftType != &quot;no auxilary&quot;) %&gt;% filter(acraftType != &quot;no auxiliary band&quot;) %&gt;% filter(acraftType != &quot;plastic-numeric&quot;) %&gt;% filter(acraftType != &quot;bar&quot;) %&gt;% filter(acraftType != &quot;normal&quot;) %&gt;% filter(acraftType != &quot;over&quot;) %&gt;% filter(acraftType != &quot;vbar&quot;) %&gt;% filter(!is.na(acraftType) ) #next we need to exclude recaptures and get distinct band numbers color_bands &lt;- color_bands %&gt;% distinct(band, USGSLeg, acraftType, right_top, right_bottom, left_top, left_bottom, sex) #next renambe the columns to match the database in SQL export_color &lt;- color_bands %&gt;% rename( BUOW_USGS_ID = band, top_left_band = left_top, bottom_left_band = left_bottom, top_right_band = right_top, bottom_right_band = right_bottom ) #finally pick all columns needed for export export_color &lt;- export_color %&gt;% select(BUOW_USGS_ID, top_left_band, bottom_left_band, top_right_band, bottom_right_band, sex) 2.10 Get the rest of the bands that have neither ACRAFT nor Color bands #select all columns needed for all other bands all_other_bands &lt;- practice_band %&gt;% select(band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSecondCode, AcraftLeg, sex) %&gt;% filter(!acraftType %in% c(&quot;plastic&quot;, &quot;plastic-numeric&quot;, &quot;bar&quot;, &quot;normal&quot;, &quot;over&quot;, &quot;vbar&quot;) | is.na(acraftType)) #remove all recaptures and only get distinct band numbers all_other_bands &lt;- all_other_bands %&gt;% distinct(band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSecondCode, AcraftLeg, sex) #code that assigns left or right to indicate which leg the USGS band is placed all_other_bands &lt;- all_other_bands %&gt;% mutate( left_leg = case_when( grepl(&quot;Left&quot;, USGSLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Left&quot; in USGSLeg, set &#39;USGS&#39; grepl(&quot;Left&quot;, AcraftLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Left&quot; in AcraftLeg, set &#39;USGS&#39; TRUE ~ NA_character_ # Otherwise, set &#39;NA&#39; ), right_leg = case_when( grepl(&quot;Right&quot;, USGSLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Right&quot; in USGSLeg, set &#39;USGS&#39; grepl(&quot;Right&quot;, AcraftLeg, ignore.case = TRUE) ~ &quot;USGS&quot;, # If &quot;Right&quot; in AcraftLeg, set &#39;USGS&#39; TRUE ~ NA_character_ # Otherwise, set &#39;NA&#39; ) ) #rename columns to match SQL database export_all_other_bands &lt;- all_other_bands %&gt;% rename(BUOW_USGS_ID = band) #select all columns for export to SQL export_all_other_bands &lt;- export_all_other_bands %&gt;% select( BUOW_USGS_ID, left_leg, right_leg, sex ) 2.11 Finally remove all unneccessary dataframes and objects to keep environment tidy remove(distinct_bands_all_columns, all_other_bands, test, acraft, bands, BUOW1, color_bands, repeating_values) ## Warning in remove(distinct_bands_all_columns, all_other_bands, test, acraft, : ## object &#39;test&#39; not found remove(bands_to_change, bands_to_fix, bands_with_both, bands_with_f_u, bands_with_m_u, columns_to_check) remove(BUOW1, bands, color_bands, distinct_bands_all_columns, practice_band, repeating_values, test, acraft, all_other_bands) ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;BUOW1&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;bands&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;color_bands&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;distinct_bands_all_columns&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;repeating_values&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;test&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;acraft&#39; not found ## Warning in remove(BUOW1, bands, color_bands, distinct_bands_all_columns, : ## object &#39;all_other_bands&#39; not found "],["cleaning-band-data-2020---august-2024.html", "Chapter 3 Cleaning Band Data 2020 - August 2024 3.1 Install and load packages 3.2 Set directory and load data 3.3 Add hyphens where needed 3.4 Move colors into correct columns 3.5 Proof and Edit the sex column 3.6 Export data and remove objects", " Chapter 3 Cleaning Band Data 2020 - August 2024 3.1 Install and load packages install.packages(&quot;tidyverse&quot;) install.packages(&quot;readxl&quot;) library(tidyverse) library(readxl) 3.2 Set directory and load data setwd(&quot;~/BUOW_Migration-Maps/data&quot;) BUOW &lt;- read_excel(&quot;RecentBUOWDataAdditions.xlsx&quot;) Now select columns needed for cleaning bands &lt;- select(BUOW, band, right_top, right_bottom, left_top, left_bottom, BandCombo, sex) 3.3 Add hyphens where needed criteria1 &lt;- &quot;934&quot; #some bands already had a dash so now there is -- criteria2 &lt;- &quot;914&quot; criteria3 &lt;- &quot;804&quot; criteriax &lt;- c(criteria1, criteria2, criteria3) practice_band &lt;- bands%&gt;% mutate(band = case_when( substr(band, 1, 3) %in% criteriax ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 3), &quot;-&quot;, substr(clean_band, 4, nchar(clean_band))) }, TRUE ~ band)) # Keep original band if no criteria match remove(criteria1, criteria2, criteria3, criteriax) Before moving on we want to add a unique key to each capture event practice_band &lt;- practice_band %&gt;% mutate(unique_key = row_number()) %&gt;% # Adds a sequence number starting from 1 select(unique_key, everything()) 3.4 Move colors into correct columns First extract the colors and place in correct columns practice_band &lt;- practice_band %&gt;% mutate( top_left_band = str_extract(BandCombo, &quot;^[^/]+&quot;), # Extract top left part (before first &quot;/&quot;) bottom_left_band = str_extract(BandCombo, &quot;(?&lt;=/)[^:]+&quot;), # Extract bottom left part (between &quot;/&quot; and &quot;:&quot;) top_right_band = str_extract(BandCombo, &quot;(?&lt;=:)[^/]+&quot;), # Extract top right part (between &quot;:&quot; and &quot;/&quot;) bottom_right_band = str_extract(BandCombo, &quot;(?&lt;=/)[^/]+$&quot;) # Extract bottom right part (after last &quot;/&quot;) ) Next only select bands that have a color combo practice_band &lt;- practice_band %&gt;% mutate(right_top = ifelse(is.na(right_top), top_right_band, right_top), right_bottom = ifelse(is.na(right_bottom), bottom_right_band, right_bottom), left_top = ifelse(is.na(left_top), top_left_band, left_top), left_bottom = ifelse(is.na(left_bottom), bottom_left_band, left_bottom)) Next change the abbreviations to full spelling of colors practice_band &lt;- practice_band %&gt;% mutate( left_top = gsub(&quot;Re&quot;, &quot;Red&quot;, left_top), left_top = gsub(&quot;NB&quot;, &quot;No Band&quot;, left_top), left_top = gsub(&quot;Bk&quot;, &quot;Black&quot;, left_top), left_top = gsub(&quot;Wh&quot;, &quot;White&quot;, left_top), left_top = gsub(&quot;Ye&quot;, &quot;Yellow&quot;, left_top), left_top = gsub(&quot;MBl&quot;, &quot;Medium Blue&quot;, left_top), left_top = gsub(&quot;MGr&quot;, &quot;Medium Green&quot;, left_top), left_top = gsub(&quot;Or&quot;, &quot;Orange&quot;, left_top), left_top = gsub(&quot;LBl&quot;, &quot;Light Blue&quot;, left_top), left_top = gsub(&quot;Gy&quot;, &quot;Gray&quot;, left_top), left_top = gsub(&quot;AL&quot;, &quot;USGS&quot;, left_top) ) practice_band &lt;- practice_band %&gt;% mutate( right_top = gsub(&quot;Re&quot;, &quot;Red&quot;, right_top), right_top = gsub(&quot;NB&quot;, &quot;No Band&quot;, right_top), right_top = gsub(&quot;Bk&quot;, &quot;Black&quot;, right_top), right_top = gsub(&quot;Wh&quot;, &quot;White&quot;, right_top), right_top = gsub(&quot;Ye&quot;, &quot;Yellow&quot;, right_top), right_top = gsub(&quot;MBl&quot;, &quot;Medium Blue&quot;, right_top), right_top = gsub(&quot;MGr&quot;, &quot;Medium Green&quot;, right_top), right_top = gsub(&quot;Or&quot;, &quot;Orange&quot;, right_top), right_top = gsub(&quot;LBl&quot;, &quot;Light Blue&quot;, right_top), right_top = gsub(&quot;Gy&quot;, &quot;Gray&quot;, right_top), right_top = gsub(&quot;AL&quot;, &quot;USGS&quot;, right_top) ) practice_band &lt;- practice_band %&gt;% mutate( left_bottom = gsub(&quot;Re&quot;, &quot;Red&quot;, left_bottom), left_bottom = gsub(&quot;NB&quot;, &quot;No Band&quot;, left_bottom), left_bottom = gsub(&quot;Bk&quot;, &quot;Black&quot;, left_bottom), left_bottom = gsub(&quot;Wh&quot;, &quot;White&quot;, left_bottom), left_bottom = gsub(&quot;Ye&quot;, &quot;Yellow&quot;, left_bottom), left_bottom = gsub(&quot;MBl&quot;, &quot;Medium Blue&quot;, left_bottom), left_bottom = gsub(&quot;MGr&quot;, &quot;Medium Green&quot;, left_bottom), left_bottom = gsub(&quot;Or&quot;, &quot;Orange&quot;, left_bottom), left_bottom = gsub(&quot;LBl&quot;, &quot;Light Blue&quot;, left_bottom), left_bottom = gsub(&quot;Gy&quot;, &quot;Gray&quot;, left_bottom), left_bottom = gsub(&quot;ACGr&quot;, &quot;ACRAFT Green&quot;, left_bottom), left_bottom = gsub(&quot;AL&quot;, &quot;USGS&quot;, left_bottom) ) practice_band &lt;- practice_band %&gt;% mutate( right_bottom = gsub(&quot;Re&quot;, &quot;Red&quot;, right_bottom), right_bottom = gsub(&quot;NB&quot;, &quot;No Band&quot;, right_bottom), right_bottom = gsub(&quot;Bk&quot;, &quot;Black&quot;, right_bottom), right_bottom = gsub(&quot;Wh&quot;, &quot;White&quot;, right_bottom), right_bottom = gsub(&quot;Ye&quot;, &quot;Yellow&quot;, right_bottom), right_bottom = gsub(&quot;MBl&quot;, &quot;Medium Blue&quot;, right_bottom), right_bottom = gsub(&quot;MGr&quot;, &quot;Medium Green&quot;, right_bottom), right_bottom = gsub(&quot;Or&quot;, &quot;Orange&quot;, right_bottom), right_bottom = gsub(&quot;LBl&quot;, &quot;Light Blue&quot;, right_bottom), right_bottom = gsub(&quot;Gy&quot;, &quot;Gray&quot;, right_bottom), right_bottom = gsub(&quot;AL&quot;, &quot;USGS&quot;, right_bottom) ) Remove some columns that are no longer needed practice_band &lt;- select(practice_band, -BandCombo, -top_right_band, -top_left_band, -bottom_right_band, -bottom_left_band) 3.5 Proof and Edit the sex column First standardize all variables in the sex column practice_band &lt;- practice_band %&gt;% mutate(sex = gsub(&quot;female&quot;, &quot;F&quot;, sex), sex = gsub(&quot;male&quot;, &quot;M&quot;, sex), sex = gsub(&quot;unknown&quot;, &quot;U&quot;, sex), sex = gsub(&quot;Unk&quot;, &quot;U&quot;, sex), sex = gsub(&quot;J&quot;, &quot;U&quot;, sex), sex = gsub(&quot;hy&quot;, &quot;U&quot;, sex), sex = gsub(&quot;X&quot;, NA, sex)) There are a few cases where there are conflicting sex variables for the same bird. There can only be one value in the band table so all these values need to be changed to C to reflect this conflict. #Make all bands that contain both M and F into C. This also makes U a C in these cases. bands_with_both &lt;- practice_band %&gt;% filter(sex %in% c(&quot;M&quot;, &quot;F&quot;)) %&gt;% # Filter rows with &quot;M&quot; or &quot;F&quot; group_by(band) %&gt;% # Group by band filter(n_distinct(sex) == 2) %&gt;% # Ensure the band contains both &quot;M&quot; and &quot;F&quot; ungroup() %&gt;% # Ungroup after filtering pull(band) # Extract the band names # Step 2: Replace &quot;M&quot;, &quot;F&quot;, and &quot;U&quot; with &quot;C&quot; only for bands that contain both &quot;M&quot; and &quot;F&quot; practice_band &lt;- practice_band %&gt;% mutate( sex = case_when( band %in% bands_with_both &amp; sex %in% c(&quot;M&quot;, &quot;F&quot;, &quot;U&quot;) ~ &quot;C&quot;, # Replace &quot;M&quot;, &quot;F&quot;, &quot;U&quot; with &quot;C&quot; if band has both &quot;M&quot; and &quot;F&quot; TRUE ~ sex # Leave all other values unchanged ) ) There are some cases where a bird was caught as a HY so sex was unknown and it was later caught as an adult and the sex was known. All these U values should be changed to M or F because there can only be one value per band. #changes MU and FU combos to M or F bands_with_m_u &lt;- practice_band %&gt;% filter(sex %in% c(&quot;M&quot;, &quot;U&quot;)) %&gt;% # Focus on &quot;M&quot; and &quot;U&quot; group_by(band) %&gt;% filter(any(sex == &quot;M&quot;) &amp; any(sex == &quot;U&quot;)) %&gt;% # Band must have both &quot;M&quot; and &quot;U&quot; ungroup() %&gt;% pull(band) # Extract the band names bands_with_f_u &lt;- practice_band %&gt;% filter(sex %in% c(&quot;F&quot;, &quot;U&quot;)) %&gt;% # Focus on &quot;F&quot; and &quot;U&quot; group_by(band) %&gt;% filter(any(sex == &quot;F&quot;) &amp; any(sex == &quot;U&quot;)) %&gt;% # Band must have both &quot;F&quot; and &quot;U&quot; ungroup() %&gt;% pull(band) # Extract the band names # Step 2: Mutate the sex column to replace &quot;U&quot; with &quot;M&quot; or &quot;F&quot; based on the logic above practice_band &lt;- practice_band %&gt;% mutate( sex = case_when( band %in% bands_with_m_u &amp; sex == &quot;U&quot; ~ &quot;M&quot;, # If band has both &quot;M&quot; and &quot;U&quot;, change &quot;U&quot; to &quot;M&quot; band %in% bands_with_f_u &amp; sex == &quot;U&quot; ~ &quot;F&quot;, # If band has both &quot;F&quot; and &quot;U&quot;, change &quot;U&quot; to &quot;F&quot; TRUE ~ sex # Otherwise, keep the original value of sex ) ) 3.6 Export data and remove objects export_recentBUOWtable &lt;- select(practice_band, BUOW_USGS_ID = band, top_left_band = left_top, bottom_left_band = left_bottom, top_right_band = right_top, bottom_right_band = right_bottom, sex) remove(bands, BUOW, practice_band, bands_with_both, bands_with_f_u, bands_with_m_u) "],["cleaning-capture-data-2000-2019.html", "Chapter 4 Cleaning Capture Data 2000-2019 4.1 Load libraries 4.2 Set directory and load data 4.3 Fix the hyphens 4.4 Convert latitude and longitude from UTM 4.5 Filter and clean data 4.6 Prepare data for export 4.7 Cleaning dobule entried rows 4.8 Prepare data for export", " Chapter 4 Cleaning Capture Data 2000-2019 4.1 Load libraries library(oce) ## Warning: package &#39;oce&#39; was built under R version 4.4.2 ## Loading required package: gsw ## Warning: package &#39;gsw&#39; was built under R version 4.4.2 library(sf) ## Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE library(tidyverse) library(elevatr) ## Warning: package &#39;elevatr&#39; was built under R version 4.4.2 ## elevatr v0.99.0 NOTE: Version 0.99.0 of &#39;elevatr&#39; uses &#39;sf&#39; and &#39;terra&#39;. Use ## of the &#39;sp&#39;, &#39;raster&#39;, and underlying &#39;rgdal&#39; packages by &#39;elevatr&#39; is being ## deprecated; however, get_elev_raster continues to return a RasterLayer. This ## will be dropped in future versions, so please plan accordingly. library(terra) ## terra 1.7.83 ## ## Attaching package: &#39;terra&#39; ## The following object is masked from &#39;package:oce&#39;: ## ## rescale ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(tools) 4.2 Set directory and load data BUOW1 &lt;- read_csv(&quot;C:/Users/mldunning/Documents/BUOW_Migration-Maps/data/BUOW_Data2000-2019.csv&quot;) ## New names: ## • `comments` -&gt; `comments...93` ## • `comments` -&gt; `comments...103` ## • `` -&gt; `...104` ## Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 12353 Columns: 104 ## ── Column specification ───────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (55): band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSe... ## dbl (47): individualID, burrow_number, year, bird_wt, left_wing, left_metat... ## lgl (1): comments...93 ## time (1): time_at_release ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. bands &lt;- BUOW1 %&gt;% select(band, Obs, dateBanded, site, Country, State, Elevation, &#39;Lat Deg&#39;, &#39;Lat Min&#39;, &#39;Lat Sec&#39;, &#39;Long Deg&#39;, &#39;Long Min&#39;, &#39;Long Sec&#39;, recap, sex, Age, UTM_e, UTM_n, UTM_zone, &#39;fleas/ecto-parasites&#39;, parasites_1, parasites_2, fat, muscle, broodPatch, brood_patch, HowSex, how_sexed, bird_wt, `weight_1_(g)`, `weight_2_(g)`, left_wing, right_wing, `left_metatarsus_(mm)`, `right_metatarsus_(mm)`, tail, `skull length`, `skull width`, culmen, `toe_1_(mm)`, `toe_2_(mm)`, `toe_3_(mm)`, `toe_4_(mm)`, `claw_1_(mm)`, `claw_2_(mm)`, `claw_3_(mm)`, `claw_4_(mm)`, time_at_release, estimated_age_at_banding, juvieage, `tarsus_(mm)`, comments...103, meas_date_1) %&gt;% mutate(unique_key = row_number()) %&gt;% # Adds a sequence number starting from 1 select(unique_key, everything()) Capitalize all letters in the observer column before moving forward bands &lt;- bands %&gt;% mutate(Obs = toupper(Obs)) 4.3 Fix the hyphens #first need to add several criterias and conditions criteria1 &lt;- &quot;0844&quot; criteria2 &lt;- &quot;0934&quot; #some bands already had a dash so now there is -- criteria3 &lt;- &quot;804&quot; criteria4 &lt;- &quot;1204&quot; criteria5 &lt;- &quot;764&quot; criteria6 &lt;- &quot;544&quot; criteria7 &lt;- &quot;574&quot; criteria8 &lt;- &quot;594&quot; criteria9 &lt;- &quot;0914&quot; criteria10 &lt;- &quot;1005&quot; criteria11 &lt;- &quot;934&quot; #some bands already had a dash so now there is -- criteria12 &lt;- &quot;844&quot; Condition1 &lt;- grepl(&quot;^AL-&quot;, bands$band) criteria &lt;- c(criteria1, criteria2, criteria4, criteria9, criteria10) criteriax &lt;- c(criteria11, criteria12, criteria3, criteria5, criteria8, criteria6, criteria7) bands &lt;- bands %&gt;% mutate(band = case_when( substr(band, 1, 4) %in% criteria ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 4), &quot;-&quot;, substr(clean_band, 5, nchar(clean_band))) }, TRUE ~ band # Keep original band if no criteria match )) %&gt;% mutate(band = case_when( substr(band, 1, 3) %in% criteriax ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 3), &quot;-&quot;, substr(clean_band, 4, nchar(clean_band))) }, TRUE ~ band # Keep original band if no criteria match )) %&gt;% mutate(band =ifelse(Condition1, substr(band, 4, nchar(band)), band)) remove(criteria, criteria1, criteria2, criteria3, criteria4, criteria5, criteria6, criteria7, criteria8, criteria9, criteria10, criteria11, criteria12, criteriax, Condition1) 4.4 Convert latitude and longitude from UTM bandsutm &lt;- select(bands, unique_key, band, UTM_e, UTM_n, UTM_zone) # Select existing columns bandsutm &lt;- bandsutm[bandsutm$band != &quot;0914-56283&quot;, ] #Get LatLon from UTM#### #extract LatLong for zone 11 bandsutm11 &lt;- bandsutm %&gt;% filter(UTM_zone == 11) utm_converted &lt;- utm2lonlat(bandsutm11$UTM_e, bandsutm11$UTM_n, zone = 11, hemisphere = &quot;N&quot;) bandsutm11$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm11$Latitude &lt;- utm_converted$lat # Extract latitude #extract LatLong for zone 12 bandsutm12 &lt;- bandsutm %&gt;% filter(UTM_zone == 12) utm_converted &lt;- utm2lonlat(bandsutm12$UTM_e, bandsutm12$UTM_n, zone = 12, hemisphere = &quot;N&quot;) bandsutm12$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm12$Latitude &lt;- utm_converted$lat # Extract latitude #extract LatLong for zone 13 bandsutm13 &lt;- bandsutm %&gt;% filter(UTM_zone == 13) utm_converted &lt;- utm2lonlat(bandsutm13$UTM_e, bandsutm13$UTM_n, zone = 13, hemisphere = &quot;N&quot;) bandsutm13$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm13$Latitude &lt;- utm_converted$lat # Extract latitude # Combine all the UTM zone data into a single dataframe bandsutm_combined &lt;- bind_rows(bandsutm11, bandsutm12, bandsutm13) # Merge the combined UTM data back into the original bands dataframe bands_final &lt;- bands %&gt;% left_join(bandsutm_combined, by = &quot;unique_key&quot;) bands &lt;- select(bands_final, -UTM_e.x, -UTM_n.x, -UTM_zone.x, -band.y, -UTM_e.y, -UTM_n.y, -UTM_zone.y) # remove objects remove(bands_final, bandsutm, bandsutm_combined, bandsutm11, bandsutm12, bandsutm13, utm_converted) #Now convert latlon deg #### latlong &lt;- bands latlong$Latitude &lt;- bands$`Lat Deg` + (bands$`Lat Min` / 60) + (bands$`Lat Sec` / 3600) latlong$Longitude &lt;- (bands$`Long Deg` + (bands$`Long Min` / 60) + (bands$`Long Sec` / 3600)) * -1 # Select only the columns that we need from &#39;latlong&#39; latlong_selected &lt;- latlong %&gt;% select(unique_key, Latitude_latlong = Latitude, Longitude_latlong = Longitude ) # Perform the left join by &#39;unique_key&#39; merged_data &lt;- bands %&gt;% left_join(latlong_selected, by = &quot;unique_key&quot; ) # Combine Latitude and Longitude columns from both dataframes using coalesce() bands &lt;- merged_data %&gt;% mutate( Latitude = coalesce(Latitude, Latitude_latlong), # Combine latitudes Longitude = coalesce(Longitude, Longitude_latlong) # Combine longitudes ) %&gt;% select(-Latitude_latlong, -Longitude_latlong ) # Drop the redundant lat/long columns bands &lt;- bands %&gt;% rename(band = band.x) %&gt;% select(-`Lat Deg`, -`Lat Min`, -`Lat Sec`, -`Long Deg`, -`Long Min`, -`Long Sec` ) 4.5 Filter and clean data Some data from Umatilla had multiple capture events on the same row. I had to exclude these and process them later. newbands &lt;- bands %&gt;% filter(is.na(meas_date_1)) 4.5.1 Filter and clean parasite column parasite &lt;- select(newbands, unique_key, &#39;fleas/ecto-parasites&#39; ) parasite &lt;- parasite %&gt;% mutate(&#39;fleas/ecto-parasites&#39; = gsub(&quot;y&quot;, &quot;Y&quot;, `fleas/ecto-parasites`), &#39;fleas/ecto-parasites&#39; = gsub(&quot;x&quot;, NA, `fleas/ecto-parasites`), &#39;fleas/ecto-parasites&#39; = gsub(&quot;-&quot;, NA, `fleas/ecto-parasites`), &#39;fleas/ecto-parasites&#39; = gsub(&quot;none&quot;, &quot;0&quot;, `fleas/ecto-parasites`), &#39;fleas/ecto-parasites&#39; = gsub(&quot;N&quot;, &quot;0&quot;, `fleas/ecto-parasites`) ) parasite &lt;- select(parasite, unique_key, number_of_ectoparasites_categorical = &#39;fleas/ecto-parasites&#39;, ) newbands &lt;- newbands %&gt;% left_join(parasite, by = &quot;unique_key&quot; ) newbands &lt;- select(newbands, -&#39;fleas/ecto-parasites&#39; ) 4.5.2 Filter and clean brood patch column broodpatch &lt;- select(newbands, unique_key, sex, broodPatch, brood_patch ) broodpatch &lt;- broodpatch %&gt;% mutate(broodPatch = ifelse(is.na(broodPatch), brood_patch, broodPatch)) broodpatch &lt;- broodpatch %&gt;% mutate(broodPatch = gsub(&quot;f&quot;, &quot;F&quot;, broodPatch), broodPatch = gsub(&quot;Yes&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;YES&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;p&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;Y&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;y&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;v&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;r&quot;, &quot;R&quot;, broodPatch), broodPatch = gsub(&quot;w&quot;, &quot;W&quot;, broodPatch), broodPatch = gsub(&quot;s&quot;, &quot;S&quot;, broodPatch), broodPatch = gsub(&quot;NO&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;No&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;X&quot;, NA, broodPatch), broodPatch = gsub(&quot;x&quot;, NA, broodPatch), broodPatch = gsub(&quot;-&quot;, NA, broodPatch), broodPatch = gsub(&quot;N/A&quot;, NA, broodPatch), broodPatch = gsub(&quot;j&quot;, NA, broodPatch), broodPatch = gsub(&quot;n&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;U&quot;, NA, broodPatch), broodPatch = gsub(&quot;N&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;V YES&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;O&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;V P&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;V\\\\?&quot;, &quot;V&quot;, broodPatch), # &#39;V?&#39; matches &#39;V&#39; or &#39;V?&#39; broodPatch = gsub(&quot;P/V&quot;, &quot;V&quot;, broodPatch) # Replaces &#39;P/V&#39; with &#39;V&#39; ) broodpatch &lt;- select(broodpatch, unique_key, BROODPATCH = broodPatch ) newbands &lt;- newbands %&gt;% left_join(broodpatch, by = &quot;unique_key&quot;) newbands &lt;- select(newbands, -broodPatch, -brood_patch ) 4.5.3 Filter and clean sex column howsexed &lt;- select(newbands, unique_key, sex, HowSex, how_sexed ) howsexed &lt;- howsexed %&gt;% mutate(HowSex = ifelse(is.na(HowSex), how_sexed, HowSex) ) howsexed &lt;- select(howsexed, unique_key, how_sexedID = HowSex ) newbands &lt;- newbands %&gt;% left_join(howsexed, by = &quot;unique_key&quot;) newbands &lt;- select(newbands, -HowSex, -how_sexed ) 4.5.4 Filter and clean HY day old age juvage &lt;- select(newbands, unique_key, juvieage, estimated_age_at_banding ) juvage &lt;- juvage %&gt;% mutate(juvieage = ifelse(is.na(juvieage), estimated_age_at_banding, juvieage) ) juvage &lt;- juvage %&gt;% mutate(juvieage = gsub(&quot;13-Nov&quot;, &quot;11-13&quot;, juvieage), juvieage = gsub(&quot;13-Dec&quot;, &quot;12-13&quot;, juvieage), juvieage = gsub(&quot;12-Sep&quot;, &quot;11-12&quot;, juvieage), juvieage = gsub(&quot;12-Oct&quot;, &quot;12&quot;, juvieage), juvieage = gsub(&quot;15-Sep&quot;, &quot;11-15&quot;, juvieage), juvieage = gsub(&quot;11-Aug&quot;, &quot;9-11&quot;, juvieage), juvieage = gsub(&quot;10-Aug&quot;, &quot;8-10&quot;, juvieage), juvieage = gsub(&quot;11-Sep&quot;, &quot;11&quot;, juvieage), juvieage = gsub(&quot;15-Dec&quot;, &quot;12-15&quot;, juvieage), juvieage = gsub(&quot;14-Dec&quot;, &quot;12-14&quot;, juvieage), juvieage = gsub(&quot;x&quot;, NA, juvieage), juvieage = gsub(&quot;X&quot;, NA, juvieage), juvieage = gsub(&quot;~&quot;, &quot;&quot;, juvieage), juvieage = gsub(&quot; d&quot;, &quot;&quot;, juvieage), juvieage = gsub(&quot;(\\\\d+)\\\\+&quot;, &quot;&gt;\\\\1&quot;, juvieage) ) unique(juvage$juvieage) ## [1] NA &quot;18&quot; &quot;15&quot; &quot;12&quot; &quot;32&quot; &quot;35&quot; ## [7] &quot;28&quot; &quot;23&quot; &quot;30&quot; &quot;17&quot; &quot;16&quot; &quot;19&quot; ## [13] &quot;22&quot; &quot;20&quot; &quot;25&quot; &quot;42&quot; &quot;29&quot; &quot;14&quot; ## [19] &quot;26&quot; &quot;24&quot; &quot;27&quot; &quot;21&quot; &quot;33&quot; &quot;26-28&quot; ## [25] &quot;30-32&quot; &quot;19-22&quot; &quot;32-45&quot; &quot;22-24&quot; &quot;28-30&quot; &quot;24-26&quot; ## [31] &quot;13-15&quot; &quot;&gt;24&quot; &quot;21-22&quot; &quot;&lt;12&quot; &quot;&gt;35&quot; &quot;&gt;26&quot; ## [37] &quot;&gt;30&quot; &quot;40&quot; &quot;18-20&quot; &quot;16-17&quot; &quot;15-16&quot; &quot;21-23&quot; ## [43] &quot;16-18&quot; &quot;42-44&quot; &quot;26-27&quot; &quot;27-28&quot; &quot;23-25&quot; &quot;25-26&quot; ## [49] &quot;19-21&quot; &quot;18-21&quot; &quot;33-36&quot; &quot;32-36&quot; &quot;33-37&quot; &quot;31-34&quot; ## [55] &quot;28-32&quot; &quot;28-31&quot; &quot;27-30&quot; &quot;26-30&quot; &quot;40-45&quot; &quot;11-13&quot; ## [61] &quot;17-19&quot; &quot;9-11&quot; &quot;12-14&quot; &quot;14-15&quot; &quot;13-14&quot; &quot;39-42&quot; ## [67] &quot;13&quot; &quot;&gt;32&quot; &quot;36&quot; &quot;38&quot; &quot;17-18&quot; &quot;24-25&quot; ## [73] &quot;16-19&quot; &quot;15-17&quot; &quot;14-16&quot; &quot;13-16&quot; &quot;14-17&quot; &quot;22-26&quot; ## [79] &quot;20-22&quot; &quot;17-20&quot; &quot;25-27&quot; &quot;20-28&quot; &quot;19-20&quot; &quot;18-19&quot; ## [85] &quot;32-34&quot; &quot;18-22&quot; &quot;25-28&quot; &quot;30-34&quot; &quot;24-28&quot; &quot;50-54&quot; ## [91] &quot;45-50&quot; &quot;45-48&quot; &quot;38-40&quot; &quot;38-42&quot; &quot;38-44&quot; &quot;23-26&quot; ## [97] &quot;23-28&quot; &quot;36-38&quot; &quot;34-36&quot; &quot;45-55&quot; &quot;43-45&quot; &quot;50-60&quot; ## [103] &quot;44-46&quot; &quot;50-55&quot; &quot;34-38&quot; &quot;40-44&quot; &quot;70-74&quot; &quot;44-48&quot; ## [109] &quot;65-70&quot; &quot;60-65&quot; &quot;21-24&quot; &quot;18-23&quot; &quot;16-20&quot; &quot;29-31&quot; ## [115] &quot;27-29&quot; &quot;30-31&quot; &quot;40-42&quot; &quot;45-47&quot; &quot;&gt;50&quot; &quot;12-15&quot; ## [121] &quot;29-33&quot; &quot;36-40&quot; &quot;30-33&quot; &quot;28-29&quot; &quot;33-35&quot; &quot;&gt;45&quot; ## [127] &quot;32-35&quot; &quot;59-61&quot; &quot;63-65&quot; &quot;45&quot; &quot;40-43&quot; &quot;35-38&quot; ## [133] &quot;35-40&quot; &quot;75&quot; &quot;65&quot; &quot;&gt;60&quot; &quot;90-11&quot; &quot;50-52&quot; ## [139] &quot;32-40&quot; &quot;55-60&quot; &quot;60-70&quot; &quot;31&quot; &quot;37&quot; &quot;43&quot; ## [145] &quot;24-27&quot; &quot;29-32&quot; &quot;22-25&quot; &quot;27-31&quot; &quot;46&quot; &quot;47&quot; ## [151] &quot;44&quot; &quot;48&quot; &quot;34&quot; &quot;11&quot; &quot;41&quot; &quot;12-13&quot; ## [157] &quot;50&quot; &quot;15-19&quot; &quot;14-18&quot; &quot;25-30&quot; &quot;26-29&quot; &quot;46-48&quot; ## [163] &quot;32-38&quot; &quot;20-25&quot; &quot;42-45&quot; &quot;30-40&quot; &quot;45-52&quot; &quot;100-1&quot; ## [169] &quot;70-80&quot; &quot;80-90&quot; &quot;90-10&quot; &quot;78-84&quot; &quot;20-24&quot; &quot;42-46&quot; ## [175] &quot;&gt;42&quot; &quot;30-35&quot; &quot;&gt;40&quot; &quot;38-41&quot; &quot;39&quot; &quot;55&quot; ## [181] &quot;49&quot; &quot;53&quot; &quot;51&quot; &quot;8-10&quot; &quot;11-12&quot; &quot;32-33&quot; ## [187] &quot;41-42&quot; &quot;23-24&quot; &quot;35-37&quot; &quot;20-23&quot; &quot;46-50&quot; &quot;39-41&quot; ## [193] &quot;31-33&quot; &quot;46-49&quot; &quot;60&quot; &quot;58&quot; &quot;10&quot; &quot;37-39&quot; ## [199] &quot;43-46&quot; &quot;39-40&quot; &quot;55-65&quot; &quot;75-85&quot; &quot;80-85&quot; &quot;75-80&quot; ## [205] &quot;85&quot; &quot;28-34&quot; &quot;old&quot; &quot;ancient!&quot; &quot;15-18&quot; &quot;19-24&quot; ## [211] &quot;29-30&quot; &quot;31-35&quot; &quot;15-20&quot; &quot;26-32&quot; &quot;22-27&quot; &quot;48-52&quot; ## [217] &quot;11-15&quot; &quot;13-18&quot; &quot;14-24&quot; &quot;17-22&quot; &quot;36-39&quot; &quot;28-35&quot; ## [223] &quot;38-45&quot; &quot;&gt;38&quot; &quot;&gt;28&quot; &quot;8&quot; &quot;9&quot; juvage &lt;- select(juvage, unique_key, &quot;juvenile_estimated_usage(days)&quot; = juvieage ) newbands &lt;- newbands %&gt;% left_join(juvage, by = &quot;unique_key&quot; ) newbands &lt;- select(newbands, -juvieage, -estimated_age_at_banding ) 4.5.5 Standardize values newbands &lt;- newbands %&gt;% mutate( fat = gsub(&quot;NA&quot;, NA, fat), fat = gsub(&quot;X&quot;, NA, fat), muscle = gsub(&quot;NA&quot;, NA, muscle), muscle = gsub(&quot;X&quot;, NA, muscle), right_wing = gsub(&quot;NA&quot;, NA, right_wing), right_wing = gsub(&quot;X&quot;, NA, right_wing), `tarsus_(mm)` = gsub(&quot;NA&quot;, NA, `tarsus_(mm)`), `tarsus_(mm)` = gsub(&quot;X&quot;, NA, `tarsus_(mm)`), tail = gsub(&quot;X&quot;, NA, tail), tail = gsub(&quot;NA&quot;, NA, tail), `skull length` = gsub(&quot;X&quot;, NA, `skull length`), `skull length` = gsub(&quot;NA&quot;, NA, `skull length`), `skull width` = gsub(&quot;X&quot;, NA, `skull width`), `skull width` = gsub(&quot;NA&quot;, NA, `skull width`), culmen = gsub(&quot;X&quot;, NA, culmen), culmen = gsub(&quot;NA&quot;, NA, culmen), time_at_release = gsub(&quot;~&quot;, &quot;&quot;, time_at_release), time_at_release = gsub(&quot;:&quot;, &quot;&quot;, time_at_release), recap = gsub(&quot;yes&quot;, &quot;Y&quot;, recap), recap = gsub(&quot;no&quot;, &quot;N&quot;, recap), Country =gsub(&quot;MX&quot;, &quot;Mexico&quot;, Country) ) 4.5.6 Change site to abbreviations to full names newbands &lt;- newbands %&gt;% mutate( site = gsub(&quot;KAFB&quot;, &quot;Kirtland Air Force Base&quot;, site), site = gsub(&quot;DESERET CHEMICAL DEPOT (TEAD)&quot;, &quot;Tooele Army Depot&quot;, site), site = gsub(&quot;TEAD&quot;, &quot;Tooele Army Depot&quot;, site), site = gsub(&quot;\\\\bTHUNDER\\\\b(?!\\\\s+\\\\w+)&quot;, &quot;Thunder Basin&quot;, site, perl = TRUE), site = gsub(&quot;PUEBLOCD&quot;, &quot;Pueblo Chemical Depot&quot;, site), site = gsub(&quot;SSNWR&quot;, &quot;Salton Sea National Wildlife Refuge&quot;, site), site = gsub(&quot;SFC&quot;, &quot;Salmon Falls Creek&quot;, site), site = gsub(&quot;NELLISAFB&quot;, &quot;Nellis Air Force Base&quot;, site), site = gsub(&quot;DIXNRS&quot;, &quot;Dixon Naval Radio Transmitter Facility&quot;, site), site = gsub(&quot;ML&quot;, &quot;Moses Lake&quot;, site), site = gsub(&quot;YTC&quot;, &quot;Yakima Training Center&quot;, site), site = gsub(&quot;\\\\bTC\\\\b&quot;, &quot;Tri-Cities&quot;, site), site = gsub(&quot;NEVTS&quot;, &quot;Nevada National Security Site&quot;, site), site = gsub(&quot;NASLEM&quot;, &quot;Naval Air Station Lemoore &quot;, site), site = gsub(&quot;LAS CIENEGAS NCA&quot;, &quot;Las Cienegas National Conservation Area&quot;, site), site = gsub(&quot;DUGWAYPG&quot;, &quot;Dugway Proving Ground&quot;, site), site = gsub(&quot;ANTELOPEISLAND&quot;, &quot;Antelope Island&quot;, site), site = gsub(&quot;WSMRNM&quot;, &quot;White Sands Missile Range&quot;, site), site = gsub(&quot;CG&quot;, &quot;Casa Grande&quot;, site), site = gsub(&quot;NASNI&quot;, &quot;Naval Air Station North Island&quot;, site), site = gsub(&quot;NAFELCEN&quot;, &quot;Naval Air Facility El Centro&quot;, site), site = gsub(&quot;EDWARDSAFB&quot;, &quot;Edwards Air Force Base&quot;, site), site = gsub(&quot;MARCHARB&quot;, &quot;March Air Reserve Base&quot;, site), site = gsub(&quot;PINIONCMS&quot;, &quot;Piñon Canyon Maneuver Site&quot;, site), site = gsub(&quot;FTCARSON&quot;, &quot;Fort Carson&quot;, site), site = gsub(&quot;BUCKLEYAFB&quot;, &quot;Buckley Space Force Base&quot;, site), site = gsub(&quot;SCHRIEAFB&quot;, &quot;Schriever Space Force Base&quot;, site), site = gsub(&quot;RCKYMNTARS&quot;, &quot;Rocky Mountain Arsenal&quot;, site), site = gsub(&quot;YPGYAZ&quot;, &quot;Yuma Proving Ground&quot;, site), site = gsub(&quot;YMCAS&quot;, &quot;Yuma Marine Corps Air Station&quot;, site), site = gsub(&quot;MTHOMEAFB&quot;, &quot;Mountain Home Air Force Base&quot;, site), site = gsub(&quot;CROOKCRRNCH&quot;, &quot;Crooked Creek Ranch&quot;, site), site = gsub(&quot;BLACKFT&quot;, &quot;Hwy 26/Blackfoot &quot;, site), site = gsub(&quot;HILLAFB&quot;, &quot;Hill Air Force Base&quot;, site), site = gsub(&quot;MATAMORAS&quot;, &quot;Matamoros&quot;, site), site = gsub(&quot;KENMINCO&quot;, &quot;Kennecott Mining Co., Saltair&quot;, site), site = gsub(&quot;STGEORGE&quot;, &quot;St. George&quot;, site), site = gsub(&quot;SHARPEDEP&quot;, &quot;Sharpe Depot&quot;, site), site = gsub(&quot;TRAVISAFB&quot;, &quot;Travis Air Force Base&quot;, site), site = gsub(&quot;ELMORE&quot;, &quot;Elmore County&quot;, site), site = gsub(&quot;UTTR&quot;, &quot;Utah Test and Training Range&quot;, site), site = gsub(&quot;MOUNTAIN HOME&quot;, &quot;Mountain Home Air Force Base&quot;, site), site = gsub(&quot;MHAFB&quot;, &quot;Mountain Home Air Force Base&quot;, site), site = gsub(&quot;Grand View&quot;, &quot;Grand View&quot;, site), site = gsub(&quot;PUEBLO CHEM DEPOT&quot;, &quot;Pueblo Chemical Depot&quot;, site), site = gsub(&quot;UAD&quot;, &quot;Umatilla Army Depot&quot;, site), site = gsub(&quot;OTR&quot;, &quot;Orchard Combat Training Center&quot;, site), site = gsub(&quot;BOARDBR&quot;, &quot;Boardman Bombing Range&quot;, site), # Step 1: Convert all text to lowercase first site = tolower(site), # Step 2: Capitalize the first letter of each word site = gsub(&quot;\\\\b(\\\\w)&quot;, &quot;\\\\U\\\\1&quot;, site, perl = TRUE) ) 4.6 Prepare data for export exportcapturesall &lt;- select(newbands, band, observer = Obs, date = dateBanded, site, country = Country, state = State, elevation_ft = Elevation, lat = Latitude, long = Longitude, recapture = recap, `juvenile_estimated_age(days)` = &quot;juvenile_estimated_usage(days)&quot;, age_at_capture = Age, sex_at_capture = sex, how_sexedID, brood_patch = BROODPATCH, number_of_ectoparasites_categorical, fat_score = fat, muscle_score = muscle, weight_g = bird_wt, left_wing_cord_mm = left_wing, righ_wing_cord_mm = right_wing, tail_length_mm = tail, tarsus_mm = `tarsus_(mm)`, left_tarsus_mm = `left_metatarsus_(mm)`, right_tarsus_mm = `right_metatarsus_(mm)`, head_length_mm = `skull length`, head_width_mm = `skull width`, culmen, toe_1_mm = `toe_1_(mm)`, toe_2_mm = `toe_2_(mm)`, toe_3_mm = `toe_3_(mm)`, toe_4_mm = `toe_4_(mm)`, claw_1_mm = `claw_1_(mm)`, claw_2_mm = `claw_2_(mm)`, claw_3_mm = `claw_3_(mm)`, claw_4_mm = `claw_4_(mm)`, time_released = time_at_release, comments = comments...103) Sometimes the sex and age can be inferred from one another so this code makes those inferences and standardizes values exportcapturesall &lt;- exportcapturesall %&gt;% mutate( age_at_capture = if_else(sex_at_capture == &quot;J&quot; &amp; is.na(age_at_capture), &quot;HY&quot;, age_at_capture), age_at_capture = if_else(sex_at_capture == &quot;F&quot; &amp; is.na(age_at_capture), &quot;AHY&quot;, age_at_capture), age_at_capture = if_else(sex_at_capture == &quot;M&quot; &amp; is.na(age_at_capture), &quot;AHY&quot;, age_at_capture), sex_at_capture = if_else(age_at_capture == &quot;HY&quot; &amp; is.na(sex_at_capture), &quot;J&quot;, sex_at_capture), sex_at_capture = if_else(age_at_capture == &quot;L&quot; &amp; is.na(sex_at_capture), &quot;J&quot;, sex_at_capture), sex_at_capture = gsub(&quot;J&quot;, &quot;U&quot;, sex_at_capture)) Some of the column data structures need to be changed for final import into SQL exportcapturesall$date &lt;- as.Date(exportcapturesall$date, format = &quot;%d-%b-%y&quot;) exportcapturesall$righ_wing_cord_mm &lt;- as.double(exportcapturesall$righ_wing_cord_mm) ## Warning: NAs introduced by coercion exportcapturesall$tail_length_mm &lt;- as.double(exportcapturesall$tail_length_mm) exportcapturesall$tarsus_mm &lt;- as.double(exportcapturesall$tarsus_mm) exportcapturesall[c(&quot;righ_wing_cord_mm&quot;, &quot;tail_length_mm&quot;, &quot;tarsus_mm&quot;, &quot;head_length_mm&quot;, &quot;head_width_mm&quot;, &quot;right_tarsus_mm&quot;, &quot;culmen&quot;)] &lt;- lapply( exportcapturesall[c(&quot;righ_wing_cord_mm&quot;, &quot;tail_length_mm&quot;, &quot;tarsus_mm&quot;, &quot;head_length_mm&quot;, &quot;head_width_mm&quot;, &quot;right_tarsus_mm&quot;, &quot;culmen&quot;)], function(x) round(as.double(x), 1) ) exportcapturesall$time_released &lt;- strptime(exportcapturesall$time_released, format=&quot;%H%M%S&quot;) # Remove date, timezone, and seconds, keeping only HH:MM format exportcapturesall$time_released &lt;- format(exportcapturesall$time_released, format=&quot;%H:%M&quot;) remove(bands, broodpatch, BUOW1, howsexed, juvage, latlong, latlong_selected, merged_data, newbands, parasite) 4.7 Cleaning dobule entried rows 4.7.1 Import Data This is a continuation of the from the previous chapter. This code is to seperate the multiple capture evetns in a row to make new rows. BUOW1 &lt;- read_csv(&quot;C:/Users/mldunning/Documents/BUOW_Migration-Maps/data/BUOW_Data2000-2019.csv&quot;) ## New names: ## • `comments` -&gt; `comments...93` ## • `comments` -&gt; `comments...103` ## • `` -&gt; `...104` ## Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.: ## dat &lt;- vroom(...) ## problems(dat) ## Rows: 12353 Columns: 104 ## ── Column specification ───────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (55): band, USGSLeg, acraftColor, acraftFirstCode, acraftType, acraftSe... ## dbl (47): individualID, burrow_number, year, bird_wt, left_wing, left_metat... ## lgl (1): comments...93 ## time (1): time_at_release ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. We need to select the rows with that have multiple entries. We then make two seperate data frame to prepare the data. buow1_with_date &lt;- BUOW1 %&gt;% filter(!is.na(meas_date_1)) # Keep only rows where &#39;meas_date_1&#39; is not NA row1 &lt;- buow1_with_date row2 &lt;- buow1_with_date row1 &lt;- select(row1, -`meas_date_2`, -`est_age_2_(days)`, -`tarsometatarsus_length_2_(mm)`, -`weight_2_(g)`, -`wing_2_(mm)`, -`tail_2_(mm)`, -`parasites_2`, -`comments...103`, -eggs, -chicks) row1 &lt;- row1 %&gt;% mutate(unique_key = row_number()) row1 &lt;- row1 %&gt;% rename( meas_date = `meas_date_1`, est_age = `est_age_1_(days)`, tarsometatarsus_length = `tarsometatarsus_length_1_(mm)`, weight_g = `weight_1_(g)`, wing_mm = `wing_1_(mm)`, tail_mm = `tail_1_(mm)`, parasites = `parasites_1`, comments = `comments...93` ) row2 &lt;- select(row2, -`meas_date_1`, -`est_age_1_(days)`, -`tarsometatarsus_length_1_(mm)`, -`weight_1_(g)`, -`wing_1_(mm)`, -`tail_1_(mm)`, -`parasites_1`, -`comments...93`, -eggs, -chicks) row2 &lt;- row2 %&gt;% mutate(unique_key = row_number() + 4999) row2 &lt;- row2 %&gt;% rename( meas_date = `meas_date_2`, est_age = `est_age_2_(days)`, tarsometatarsus_length = `tarsometatarsus_length_2_(mm)`, weight_g = `weight_2_(g)`, wing_mm = `wing_2_(mm)`, tail_mm = `tail_2_(mm)`, parasites = `parasites_2`, comments = `comments...103` ) This code is to turn specific columns to numeric for future cleaning and filtering row1 &lt;- row1 %&gt;% mutate_at(vars(tarsometatarsus_length, weight_g, wing_mm, tail_mm, parasites), as.numeric) row2 &lt;- row2 %&gt;% mutate_at(vars(tarsometatarsus_length, weight_g, wing_mm, tail_mm, parasites), as.numeric) row2$est_age &lt;- as.character(row2$est_age) #Now combine the rows into a single data frame. combined_rows &lt;- bind_rows(row1, row2) ## New names: ## New names: ## • `...104` -&gt; `...94` 4.7.2 Clean data #clean HY days juvage &lt;- select(combined_rows, unique_key, est_age) juvage &lt;- juvage %&gt;% mutate(est_age = gsub(&quot; days&quot;, &quot;&quot;, est_age), est_age = gsub(&quot;not found&quot;, NA, est_age), est_age = gsub(&quot;not present&quot;, NA, est_age), est_age = gsub(&quot;UNB&quot;, NA, est_age), est_age = gsub(&quot;(\\\\d+)\\\\+&quot;, &quot;&gt;\\\\1&quot;, est_age), est_age = gsub(&quot; &quot;, &quot;&quot;, est_age), est_age = gsub(&quot;6orless&quot;, &quot;&lt;6&quot;, est_age) ) juvage &lt;- select(juvage, unique_key, &quot;juvenile_estimated_age(days)&quot; = est_age) combined_rows &lt;- combined_rows %&gt;% left_join(juvage, by = &quot;unique_key&quot;) combined_rows &lt;- select(combined_rows, -est_age) #clean site names combined_rows &lt;- combined_rows %&gt;% mutate( site = gsub(&quot;TEAD&quot;, &quot;Tooele Army Depot&quot;, site), site = gsub(&quot;UAD&quot;, &quot;Umatilla Army Depot&quot;, site), site = gsub(&quot;SSNWR&quot;, &quot;Salton Sea National Wildlife Refuge&quot;, site) ) 4.8 Prepare data for export exportumatillacaptures &lt;- select(combined_rows, band, date = `meas_date`, site, country = Country, state = State, &quot;juvenile_estimated_age(days)&quot;, number_of_ectoparasites_categorical = parasites, weight_g, wing_cord_mm = wing_mm, tail_length_mm = tail_mm, tarsus_mm = tarsometatarsus_length, comments) exportumatillacaptures$date &lt;- as.Date(exportumatillacaptures$date, format = &quot;%d-%b-%y&quot;) exportumatillacaptures$number_of_ectoparasites_categorical &lt;- as.character(exportumatillacaptures$number_of_ectoparasites_categorical) remove(BUOW1, buow1_with_date, combined_rows, juvage, row1, row2) "],["cleaning-capture-data-2020---august-2024.html", "Chapter 5 Cleaning Capture Data 2020 - August 2024 5.1 Load packages and data 5.2 Preapare data 5.3 Latitude and Longitude from UTMs 5.4 Cleaning data 5.5 Export Data", " Chapter 5 Cleaning Capture Data 2020 - August 2024 5.1 Load packages and data BUOW &lt;- read_excel(&quot;C:/Users/mldunning/Documents/BUOW_Migration-Maps/data/RecentBUOWDataAdditions.xlsx&quot;) bands &lt;- BUOW %&gt;% select( band, Obs, dateBanded, site, Country, State, recap, sex, HowSex, broodPatch, brood_patch, Age, &#39;fleas/ecto-parasites&#39;, fat, muscle, bird_wt, wing, left_wing, right_wing, `tarsus_(mm)`, `left_metatarsus_(mm)`, `right_metatarsus_(mm)`, tail, `skull length`, `skull width`, culmen, time_at_release, juvieage, AgeHY_days, P9Length_mm, comments, easting, northing, UTM_zone, latitude, longitude) %&gt;% mutate(unique_key = row_number()) %&gt;% # Adds a sequence number starting from 1 select(unique_key, everything() ) 5.2 Preapare data Some of the dates were serial numbers in excel so this code coverts it to a readable date bands &lt;- bands %&gt;% mutate( dateBanded = case_when( # Handle Excel serial numbers (numeric as character) grepl(&quot;^\\\\d+$&quot;, dateBanded) ~ as.Date(as.numeric(dateBanded), origin = &quot;1899-12-30&quot;), # Convert serial numbers to dates # Handle mm/dd/yyyy date strings grepl(&quot;^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}$&quot;, dateBanded) ~ mdy(dateBanded), # Handle yyyy-mm-dd date strings grepl(&quot;^\\\\d{4}-\\\\d{2}-\\\\d{2}$&quot;, dateBanded) ~ ymd(dateBanded), # If it doesn&#39;t match any of the above, return NA TRUE ~ NA_Date_ ) ) ## Warning: There were 3 warnings in `mutate()`. ## The first warning was: ## ℹ In argument: `dateBanded = case_when(...)`. ## Caused by warning in `as.Date()`: ## ! NAs introduced by coercion ## ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. criteria1 &lt;- &quot;934&quot; #some bands already had a dash so now there is -- criteria2 &lt;- &quot;914&quot; criteria3 &lt;- &quot;804&quot; criteriax &lt;- c(criteria1, criteria2, criteria3) practice_band &lt;- bands%&gt;% mutate(band = case_when( substr(band, 1, 3) %in% criteriax ~ { # Remove existing hyphen if it exists clean_band &lt;- gsub(&quot;-&quot;, &quot;&quot;, band) # Ensure you&#39;re using the clean version paste0(substr(clean_band, 1, 3), &quot;-&quot;, substr(clean_band, 4, nchar(clean_band))) }, TRUE ~ band)) # Keep original band if no criteria match remove(criteria1, criteria2, criteria3, criteriax ) practice_band &lt;- practice_band %&gt;% mutate(unique_key = row_number()) %&gt;% # Adds a sequence number starting from 1 select(unique_key, everything() ) 5.3 Latitude and Longitude from UTMs #Get LatLon from UTM#### bandsutm &lt;- select(bands, unique_key, band, northing, easting, UTM_zone) # Select existing columns bandsutm$easting &lt;- as.numeric(as.character(bandsutm$easting)) bandsutm$northing &lt;- as.numeric(as.character(bandsutm$northing)) #extract LatLong for zone 10 bandsutm10 &lt;- bandsutm %&gt;% filter(UTM_zone == 10) utm_converted &lt;- utm2lonlat(bandsutm10$easting, bandsutm10$northing, zone = 10, hemisphere = &quot;N&quot;) bandsutm10$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm10$Latitude &lt;- utm_converted$lat # Extract latitude #extract LatLong for zone 11 bandsutm11 &lt;- bandsutm %&gt;% filter(UTM_zone == 11) utm_converted &lt;- utm2lonlat(bandsutm11$easting, bandsutm11$northing, zone = 11, hemisphere = &quot;N&quot;) bandsutm11$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm11$Latitude &lt;- utm_converted$lat # Extract latitude #extract LatLong for zone 12 bandsutm12 &lt;- bandsutm %&gt;% filter(UTM_zone == 12) utm_converted &lt;- utm2lonlat(bandsutm12$easting, bandsutm12$northing, zone = 12, hemisphere = &quot;N&quot;) bandsutm12$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm12$Latitude &lt;- utm_converted$lat # Extract latitude #extract LatLong for zone 13 bandsutm13 &lt;- bandsutm %&gt;% filter(UTM_zone == 13) utm_converted &lt;- utm2lonlat(bandsutm13$easting, bandsutm13$northing, zone = 13, hemisphere = &quot;N&quot;) bandsutm13$Longitude &lt;- utm_converted$lon # Extract longitude bandsutm13$Latitude &lt;- utm_converted$lat # Extract latitude # Combine all the UTM zone data into a single dataframe bandsutm_combined &lt;- bind_rows(bandsutm10, bandsutm11, bandsutm12, bandsutm13) # Merge the combined UTM data back into the original bands dataframe practice_band &lt;- practice_band %&gt;% left_join(bandsutm_combined, by = &quot;unique_key&quot;) practice_band &lt;- select(practice_band, -easting.x, -northing.x, -UTM_zone.x, -band.y, -easting.y, -northing.y, -UTM_zone.y ) practice_band &lt;- rename(practice_band, band = band.x ) practice_band &lt;- practice_band %&gt;% mutate( Latitude = coalesce(as.numeric(Latitude), as.numeric(latitude)), # Convert both to numeric and combine Longitude = coalesce(as.numeric(Longitude), as.numeric(longitude)) # Same for longitude ) %&gt;% select(-latitude, -longitude) # Drop the redundant lat/long columns ## Warning: There were 2 warnings in `mutate()`. ## The first warning was: ## ℹ In argument: `Latitude = coalesce(as.numeric(Latitude), as.numeric(latitude))`. ## Caused by warning in `list2()`: ## ! NAs introduced by coercion ## ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. 5.4 Cleaning data # Recaptures practice_band &lt;- practice_band %&gt;% mutate(recap = gsub(&quot;no&quot;, &quot;N&quot;, recap), recap = gsub(&quot;yes&quot;, &quot;Y&quot;, recap), recap = gsub(&quot;R&quot;, &quot;Y&quot;, recap) ) # Sex practice_band &lt;- practice_band %&gt;% mutate(sex = gsub(&quot;female&quot;, &quot;F&quot;, sex), sex = gsub(&quot;male&quot;, &quot;M&quot;, sex), sex = gsub(&quot;unknown&quot;, &quot;U&quot;, sex), sex = gsub(&quot;Unk&quot;, &quot;U&quot;, sex), sex = gsub(&quot;X&quot;, &quot;U&quot;, sex), sex = gsub(&quot;hy&quot;, &quot;J&quot;, sex) ) # How Sex practice_band &lt;- practice_band %&gt;% mutate(HowSex = gsub(&quot;^P$&quot;, &quot;PL&quot;, HowSex), HowSex = gsub(&quot;PL/BP&quot;, &quot;BP/PL&quot;, HowSex), HowSex = gsub(&quot;Brood Patch, Plumage&quot;, &quot;BP/PL&quot;, HowSex), HowSex = gsub(&quot;Plumage, Brood Patch&quot;, &quot;BP/PL&quot;, HowSex), HowSex = gsub(&quot;Plumage&quot;, &quot;PL&quot;, HowSex), HowSex = gsub(&quot;X&quot;, NA, HowSex), HowSex = gsub(&quot;NA&quot;, NA, HowSex) ) # Broodpatch broodpatch &lt;- select(practice_band, unique_key, sex, broodPatch, brood_patch) broodpatch &lt;- broodpatch %&gt;% mutate(broodPatch = ifelse(is.na(broodPatch), brood_patch, broodPatch) ) broodpatch &lt;- broodpatch %&gt;% mutate( broodPatch = gsub(&quot;Y&quot;, &quot;P&quot;, broodPatch), broodPatch = gsub(&quot;v&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;r&quot;, &quot;R&quot;, broodPatch), broodPatch = gsub(&quot;w&quot;, &quot;W&quot;, broodPatch), broodPatch = gsub(&quot;s&quot;, &quot;S&quot;, broodPatch), broodPatch = gsub(&quot;NO&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;No&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;X&quot;, NA, broodPatch), broodPatch = gsub(&quot;x&quot;, NA, broodPatch), broodPatch = gsub(&quot;-&quot;, NA, broodPatch), broodPatch = gsub(&quot;N/A&quot;, NA, broodPatch), broodPatch = gsub(&quot;j&quot;, NA, broodPatch), broodPatch = gsub(&quot;n&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;U&quot;, NA, broodPatch), broodPatch = gsub(&quot;N&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;V YES&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;O&quot;, &quot;0&quot;, broodPatch), broodPatch = gsub(&quot;V P&quot;, &quot;V&quot;, broodPatch), broodPatch = gsub(&quot;V\\\\?&quot;, &quot;V&quot;, broodPatch), # &#39;V?&#39; matches &#39;V&#39; or &#39;V?&#39; broodPatch = gsub(&quot;P/V&quot;, &quot;V&quot;, broodPatch) ) broodpatch &lt;- select(broodpatch, unique_key, BROODPATCH = broodPatch ) practice_band &lt;- practice_band %&gt;% left_join(broodpatch, by = &quot;unique_key&quot; ) practice_band &lt;- select(practice_band, -broodPatch, -brood_patch ) # Parasites practice_band &lt;- practice_band %&gt;% mutate( `fleas/ecto-parasites` = gsub(&quot;greater&quot;, &quot;&gt;&quot;, `fleas/ecto-parasites`), `fleas/ecto-parasites` = gsub(&quot;NA&quot;, NA, `fleas/ecto-parasites`), `fleas/ecto-parasites` = gsub(&quot;none&quot;, &quot;0&quot;, `fleas/ecto-parasites`) ) # Age practice_band &lt;- practice_band %&gt;% mutate( Age = gsub(&quot;NA&quot;, NA, Age), Age = gsub(&quot;Ahy&quot;, &quot;AHY&quot;, Age), Age = gsub(&quot;&gt;40d &quot;, &quot;&quot;, Age), Age = gsub(&quot;~33d &quot;, &quot;&quot;, Age), Age = gsub(&quot;~36d HY&quot;, &quot;HY&quot;, Age), Age = gsub(&quot;HY&gt;60&quot;, &quot;HY&quot;, Age), Age = gsub(&quot;L33&quot;, &quot;L&quot;, Age), Age = gsub(&quot;L34&quot;, &quot;L&quot;, Age), Age = gsub(&quot;UNK&quot;, &quot;U&quot;, Age), Age = gsub(&quot;L32&quot;, &quot;L&quot;, Age) ) # Juvenile age in days juvage &lt;- select(practice_band, unique_key, juvieage, AgeHY_days) juvage &lt;- juvage %&gt;% mutate(juvieage = ifelse(is.na(juvieage), AgeHY_days, juvieage) ) juvage &lt;- juvage %&gt;% mutate( juvieage = gsub(&quot;35\\\\+&quot;, &quot;&gt;35&quot;, juvieage), juvieage = gsub(&quot;X&quot;, NA, juvieage), juvieage = gsub(&quot;NA&quot;, NA, juvieage) ) juvage &lt;- select(juvage, unique_key, &quot;juvenile_estimated_usage(days)&quot; = juvieage ) practice_band &lt;- practice_band %&gt;% left_join(juvage, by = &quot;unique_key&quot; ) practice_band &lt;- select(practice_band, -juvieage, -AgeHY_days ) # Fat practice_band &lt;- practice_band %&gt;% mutate( fat = gsub(&quot;NA&quot;, NA, fat), fat = gsub(&quot;X&quot;, NA, fat), muscle = gsub(&quot;NA&quot;, NA, muscle), muscle = gsub(&quot;X&quot;, NA, muscle), wing = gsub(&quot;NA&quot;, NA, wing), wing = gsub(&quot;X&quot;, NA, wing), `tarsus_(mm)` = gsub(&quot;NA&quot;, NA, `tarsus_(mm)`), `tarsus_(mm)` = gsub(&quot;X&quot;, NA, `tarsus_(mm)`), tail = gsub(&quot;X&quot;, NA, tail), tail = gsub(&quot;NA&quot;, NA, tail), `skull length` = gsub(&quot;X&quot;, NA, `skull length`), `skull length` = gsub(&quot;NA&quot;, NA, `skull length`), `skull width` = gsub(&quot;X&quot;, NA, `skull width`), `skull width` = gsub(&quot;NA&quot;, NA, `skull width`), culmen = gsub(&quot;X&quot;, NA, culmen), culmen = gsub(&quot;NA&quot;, NA, culmen), time_at_release = gsub(&quot;~&quot;, &quot;&quot;, time_at_release), time_at_release = gsub(&quot;:&quot;, &quot;&quot;, time_at_release), sex ) # Release Time practice_band &lt;- practice_band %&gt;% mutate( time_at_release = case_when( # Case 1: Handle time with AM/PM (like &quot;91300 AM&quot;, &quot;51800 PM&quot;) grepl(&quot;\\\\d{4,5} [APM]{2}&quot;, time_at_release) ~ { time_str &lt;- gsub(&quot;([0-9]+)([APM]+)&quot;, &quot;\\\\1 \\\\2&quot;, time_at_release) as.character(format(strptime(time_str, format = &quot;%I%M%p&quot;), &quot;%H:%M&quot;)) }, # Case 2: Handle 4-digit format (hhmm) grepl(&quot;^\\\\d{4}$&quot;, time_at_release) ~ { time_str &lt;- as.character(time_at_release) # Add colon if missing formatted_time &lt;- paste0(substr(time_str, 1, 2), &quot;:&quot;, substr(time_str, 3, 4)) as.character(format(strptime(formatted_time, format = &quot;%H:%M&quot;), &quot;%H:%M&quot;)) }, # Case 3: Handle 3-digit format (e.g., &quot;930&quot;, &quot;45&quot; --&gt; &quot;09:30&quot;, &quot;00:45&quot;) grepl(&quot;^\\\\d{3}$&quot;, time_at_release) ~ { time_str &lt;- as.character(time_at_release) formatted_time &lt;- paste0(&quot;0&quot;, substr(time_str, 1, 1), &quot;:&quot;, substr(time_str, 2, 3)) as.character(format(strptime(formatted_time, format = &quot;%H:%M&quot;), &quot;%H:%M&quot;)) }, # Case 4: Handle numeric values (e.g., &quot;30&quot; --&gt; &quot;00:30&quot;) grepl(&quot;^\\\\d{2,3}$&quot;, time_at_release) ~ { time_str &lt;- as.character(time_at_release) formatted_time &lt;- paste0(&quot;00:&quot;, str_pad(time_str, width = 2, pad = &quot;0&quot;)) as.character(format(strptime(formatted_time, format = &quot;%H:%M&quot;), &quot;%H:%M&quot;)) }, # Case 5: Handle any other values, set to NA TRUE ~ NA_character_ ) ) # Site Names practice_band &lt;- practice_band %&gt;% mutate( site = gsub(&quot;KAFB&quot;, &quot;Kirtland Air Force Base&quot;, site), site = gsub(&quot;Umatilla&quot;, &quot;Umatilla Army Depot&quot;, site), site = gsub(&quot;YTC&quot;, &quot;Yakima Training Center&quot;, site), site = gsub(&quot;TBNG&quot;, &quot;Thunder Basin&quot;, site), site = gsub(&quot;ALE&quot;, &quot;Arid Lands Ecology Reserve&quot;, site), site = gsub(&quot;NASL&quot;, &quot;Naval Air Station Lemoore &quot;, site), # Step 1: Convert all text to lowercase first site = tolower(site), # Step 2: Capitalize the first letter of each word site = gsub(&quot;\\\\b(\\\\w)&quot;, &quot;\\\\U\\\\1&quot;, site, perl = TRUE) ) 5.5 Export Data exportcaptures2020_2024 &lt;- select(practice_band, band, observer = Obs, date = dateBanded, site, country = Country, state = State, lat = Latitude, long = Longitude, recapture = recap, age_at_capture = Age, `juvenile_estimated_age(days)` = `juvenile_estimated_usage(days)`, sex_at_capture = sex, how_sexedID = HowSex, brood_patch = BROODPATCH, number_of_ectoparasites_categorical = `fleas/ecto-parasites`, fat_score = fat, muscle_score = muscle, weight_g = bird_wt, wing_cord_mm = wing, left_wing_cord_mm = left_wing, righ_wing_cord_mm = right_wing, tail_length_mm = tail, tarsus_mm = `tarsus_(mm)`, left_tarsus_mm = `left_metatarsus_(mm)`, right_tarsus_mm = `right_metatarsus_(mm)`, head_length_mm = `skull length`, head_width_mm = `skull width`, culmen, P9Length_mm, time_released = time_at_release, comments ) Infering the age and sex from one another and standardizing columns exportcaptures2020_2024 &lt;- exportcaptures2020_2024 %&gt;% mutate( age_at_capture = if_else(sex_at_capture == &quot;J&quot; &amp; is.na(age_at_capture), &quot;HY&quot;, age_at_capture), age_at_capture = if_else(sex_at_capture == &quot;F&quot; &amp; is.na(age_at_capture), &quot;AHY&quot;, age_at_capture), age_at_capture = if_else(sex_at_capture == &quot;M&quot; &amp; is.na(age_at_capture), &quot;AHY&quot;, age_at_capture), sex_at_capture = if_else(age_at_capture == &quot;HY&quot; &amp; is.na(sex_at_capture), &quot;J&quot;, sex_at_capture), sex_at_capture = if_else(age_at_capture == &quot;L&quot; &amp; is.na(sex_at_capture), &quot;J&quot;, sex_at_capture), sex_at_capture = gsub(&quot;J&quot;, &quot;U&quot;, sex_at_capture)) Now fix the column structures for export to SQL exportcaptures2020_2024[c(&quot;wing_cord_mm&quot;, &quot;righ_wing_cord_mm&quot;, &quot;tail_length_mm&quot;, &quot;tarsus_mm&quot;, &quot;head_length_mm&quot;, &quot;head_width_mm&quot;, &quot;culmen&quot;)] &lt;- lapply( exportcaptures2020_2024[c(&quot;wing_cord_mm&quot;, &quot;righ_wing_cord_mm&quot;, &quot;tail_length_mm&quot;, &quot;tarsus_mm&quot;, &quot;head_length_mm&quot;, &quot;head_width_mm&quot;, &quot;culmen&quot;)], function(x) round(as.double(x), 1) ) ## Warning in FUN(X[[i]], ...): NAs introduced by coercion remove(bands, bandsutm, bandsutm_combined, bandsutm10, bandsutm11, bandsutm12, bandsutm13, broodpatch, BUOW, juvage, practice_band, utm_converted) "],["create-sqllite-database-structure.html", "Chapter 6 Create SQLlite Database Structure 6.1 Create SQLlite Database", " Chapter 6 Create SQLlite Database Structure knitr::include_graphics(&quot;C:/Users/mldunning/Documents/BUOW_Book/BUOW db schema .png&quot;) Figure 6.1: Orginal schema for the burrowing owl database 6.1 Create SQLlite Database First load packages in r library(DBI) library(RSQLite) Next run the code to create the database Burrowing_Owls &lt;- dbConnect(RSQLite::SQLite(), &quot;Burrowing_Owls.db&quot;) dbExecute(Burrowing_Owls, &quot; CREATE TABLE Burrowing_Owls ( BUOW_USGS_ID VARCHAR(30) NOT NULL, top_left_band VARCHAR(30) CHECK (top_left_band IN (&#39;USGS&#39;, &#39;Black&#39;, &#39;Blue&#39;, &#39;Brown&#39;, &#39;Dark Blue&#39;, &#39;Gray&#39;, &#39;Green&#39;, &#39;Light Blue&#39;, &#39;Light Green&#39;, &#39;Orange&#39;, &#39;Pink&#39;, &#39;Purple&#39;, &#39;Red&#39;, &#39;White&#39;, &#39;Yellow&#39;, &#39;No Band&#39;, &#39;Medium Green&#39;, &#39;Medium Blue&#39;, &#39;ACRAFT Green&#39;)), bottom_left_band VARCHAR(30) CHECK (bottom_left_band IN (&#39;USGS&#39;, &#39;Black&#39;, &#39;Blue&#39;, &#39;Brown&#39;, &#39;Dark Blue&#39;, &#39;Gray&#39;, &#39;Green&#39;, &#39;Light Blue&#39;, &#39;Light Green&#39;, &#39;Orange&#39;, &#39;Pink&#39;, &#39;Purple&#39;, &#39;Red&#39;, &#39;White&#39;, &#39;Yellow&#39;, &#39;No Band&#39;, &#39;Medium Green&#39;, &#39;Medium Blue&#39;, &#39;ACRAFT Green&#39;)), top_right_band VARCHAR(30) CHECK (top_right_band IN (&#39;USGS&#39;, &#39;Black&#39;, &#39;Blue&#39;, &#39;Brown&#39;, &#39;Dark Blue&#39;, &#39;Gray&#39;, &#39;Green&#39;, &#39;Light Blue&#39;, &#39;Light Green&#39;, &#39;Orange&#39;, &#39;Pink&#39;, &#39;Purple&#39;, &#39;Red&#39;, &#39;White&#39;, &#39;Yellow&#39;, &#39;No Band&#39;, &#39;Medium Green&#39;, &#39;Medium Blue&#39;, &#39;ACRAFT Green&#39;)), bottom_right_band VARCHAR(30) CHECK (bottom_right_band IN (&#39;USGS&#39;, &#39;Black&#39;, &#39;Brown&#39;, &#39;Blue&#39;, &#39;Dark Blue&#39;, &#39;Gray&#39;, &#39;Green&#39;, &#39;Light Blue&#39;, &#39;Light Green&#39;, &#39;Orange&#39;, &#39;Pink&#39;, &#39;Purple&#39;, &#39;Red&#39;, &#39;White&#39;, &#39;Yellow&#39;, &#39;No Band&#39;, &#39;Medium Green&#39;, &#39;Medium Blue&#39;, &#39;ACRAFT Green&#39;)), left_leg VARCHAR(30) CHECK (left_leg IN (&#39;USGS&#39;, &#39;ACRAFT&#39;)), right_leg VARCHAR(30) CHECK (right_leg IN (&#39;USGS&#39;, &#39;ACRAFT&#39;)), ACRAFT_color VARCHAR(20) CHECK (ACRAFT_color IN (&#39;Black&#39;, &#39;Red&#39;, &#39;White&#39;, &#39;Red/Black&#39;, &#39;Purple&#39;, &#39;Orange&#39;, &#39;Green&#39;, &#39;Brown&#39;, &#39;Blue&#39;)), ACRAFT_first_code VARCHAR(20), ACRAFT_layout VARCHAR(20), ACRAFT_second_code VARCHAR(10), sex CHAR(1) CHECK (sex IN (&#39;M&#39;, &#39;F&#39;, &#39;U&#39;, &#39;C&#39;)), PRIMARY KEY (BUOW_USGS_ID) );&quot;) dbExecute(Burrowing_Owls, &quot;CREATE TABLE tags ( tag_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, brand VARCHAR(50), version VARCHAR(50) );&quot;) dbExecute(Burrowing_Owls, &quot; CREATE TABLE captures ( capture_event INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, BUOW_USGS_ID VARCHAR(30), observer VARCHAR(20), date TEXT, site VARCHAR(100), country VARCHAR(50), state VARCHAR(50), elevation_m INTEGER, lat REAL, long REAL, recapture CHAR(1) CHECK (recapture IN (&#39;Y&#39;, &#39;N&#39;, &#39;U&#39;, &#39;I&#39;)), age_at_capture VARCHAR(10), juvenile_estimated_age(days) VARCHAR(10), sex_at_capture VARCHAR(2) CHECK (sex_at_capture IN (&#39;U&#39;, &#39;M&#39;, &#39;F&#39;, &#39;UA&#39;)), how_sexedID VARCHAR(10), brood_patch CHAR(1) CHECK (brood_patch IN (&#39;0&#39;, &#39;W/R&#39;, &#39;W&#39;, &#39;R&#39;, &#39;P&#39;, &#39;V&#39;, &#39;W/V&#39;, &#39;F&#39;, &#39;S&#39;)), number_of_ectoparasites_categorical VARCHAR(5), fat_score INTEGER CHECK (fat_score IN (1, 2, 3, 4, 5, 0)), muscle_score INTEGER CHECK (muscle_score IN (1, 2, 3, 4, 5, 0)), weight_g REAL, wing_cord_mm REAL, left_wing_cord_mm REAL, right_wing_cord_mm REAL, tail_length_mm REAL, tarsus_mm REAL, right_metatarsus_mm REAL, left_metatarsus_mm REAL, head_length_mm REAL, head_width_mm REAL, culmen_mm REAL, P9_length_mm REAL, toe_1_mm REAL, toe_2_mm REAL, toe_3_mm REAL, toe_4_mm REAL, claw_1_mm REAL, claw_2_mm REAL, claw_3_mm REAL, claw_4_mm REAL, time_released TIME, comments VARCHAR(300), FOREIGN KEY (BUOW_USGS_ID) REFERENCES Burrowing_Owls(BUOW_USGS_ID) );&quot;) dbExecute(Burrowing_Owls, &quot;CREATE TABLE deployments ( deployment_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, tag_ID INTEGER, BUOW_USGS_ID VARCHAR(30), start_deployment DATE, end_deployment DATE, tag_status VARCHAR(50), associated_project VARCHAR(50), FOREIGN KEY(tag_ID) REFERENCES tags(tag_ID), FOREIGN KEY(BUOW_USGS_ID) REFERENCES Burrowing_Owls(BUOW_USGS_ID) );&quot;) dbExecute(Burrowing_Owls, &quot;CREATE TABLE mortality ( mortality_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, BUOW_USGS_ID VARCHAR(30), death_date DATE, probable_cause VARCHAR(50), recovered CHAR(1) CHECK (recovered IN (&#39;Y&#39;, &#39;N&#39;)), FOREIGN KEY(BUOW_USGS_ID) REFERENCES Burrowing_Owls(BUOW_USGS_ID) );&quot;) dbExecute(Burrowing_Owls, &quot;CREATE TABLE sites ( site VARCHAR(100) PRIMARY KEY NOT NULL, country VARCHAR(10), state VARCHAR(20), lat REAL, long REAL, elevation_m INTEGER, abbreviation_1 VARCHAR(30), abbreviation_2 VARCHAR(30), abbreviation_3 VARCHAR(30), comments VARCHAR(300), FOREIGN KEY(site) REFERENCES captures(site) );&quot;) # Enable Foreign Key Constraints dbExecute(Burrowing_Owls, &quot;PRAGMA foreign_keys = ON;&quot;) "],["import-buow-data-into-sqllite.html", "Chapter 7 Import BUOW data into SQLlite 7.1 Combine All Band Tables 7.2 Combine All Capture Tables 7.3 Load Sites table 7.4 Start import to SQL", " Chapter 7 Import BUOW data into SQLlite 7.1 Combine All Band Tables combineallbands &lt;- bind_rows(export_acraft, export_all_other_bands, export_color, export_recentBUOWtable) We only want to select unique bands to import to sql database unique_combineallbands &lt;- combineallbands[!duplicated(combineallbands$BUOW_USGS_ID), ] unique_combineallbands &lt;- unique_combineallbands %&gt;% mutate(left_leg = ifelse(tolower(left_leg) == &quot;acraft&quot;, &quot;ACRAFT&quot;, left_leg)) unique_combineallbands &lt;- unique_combineallbands %&gt;% mutate(right_leg = ifelse(tolower(right_leg) == &quot;acraft&quot;, &quot;ACRAFT&quot;, right_leg)) unique_combineallbands &lt;- unique_combineallbands %&gt;% mutate(left_leg = ifelse(left_leg == &quot;Right&quot;, NA, left_leg)) unique_combineallbands &lt;- unique_combineallbands %&gt;% mutate(right_leg = ifelse(right_leg == &quot;Left&quot;, NA, right_leg)) unique_combineallbands &lt;- unique_combineallbands[!is.na(unique_combineallbands$BUOW_USGS_ID), ] 7.2 Combine All Capture Tables combineallcaptures &lt;- bind_rows(exportcaptures2020_2024, exportcapturesall, exportumatillacaptures) Just need to make a quick units conversion before importing into the database combineallcaptures &lt;- combineallcaptures %&gt;% mutate(elevation_m = elevation_ft * 0.3048) combineallcaptures &lt;- combineallcaptures %&gt;% select(-elevation_ft) We need to rename the columns for the import step to work later combineallcaptures &lt;- combineallcaptures %&gt;% rename( BUOW_USGS_ID = band, right_wing_cord_mm = righ_wing_cord_mm, left_metatarsus_mm = left_tarsus_mm, right_metatarsus_mm = right_tarsus_mm, culmen_mm = culmen, P9_length_mm = P9Length_mm ) combineallcaptures &lt;- combineallcaptures[!is.na(combineallcaptures$BUOW_USGS_ID), ] 7.3 Load Sites table sites &lt;- read_excel(&quot;C:/Users/mldunning/Documents/BUOW_Migration-Maps/data/sites_kmo.xlsx&quot;) 7.4 Start import to SQL Burrowing_Owls &lt;- dbConnect(RSQLite::SQLite(), &quot;Burrowing_Owls.db&quot;) 7.4.1 Import band table First import the Band table. Every value has to match the set constratints and there can not be any repeating band numbers. dbWriteTable(Burrowing_Owls, &quot;Burrowing_Owls&quot;, unique_combineallbands, append = TRUE, row.names = FALSE) 7.4.2 Import Capture Table Next import the captures data. To do this we have to do a few extra steps because there are several unknown/unbanded birds that do not have a corresponding value in the band table. A foreign key is required to mainain data intergertiy. dbWriteTable(Burrowing_Owls, &quot;captures&quot;, combineallcaptures, append = TRUE, row.names = FALSE) 7.4.3 Import Site Table dbWriteTable(Burrowing_Owls, &quot;sites&quot;, sites, append = TRUE, row.names = FALSE) "],["data-visualization.html", "Chapter 8 Data Visualization 8.1 Capture Locations 8.2 Sex breakdown of captured owls", " Chapter 8 Data Visualization 8.1 Capture Locations 8.1.1 Use ggplot to create a map of every site burrowing owls have been captured library(DBI) library(ggplot2) library(rnaturalearth) ## Warning: package &#39;rnaturalearth&#39; was built under R version 4.4.2 library(rnaturalearthdata) ## ## Attaching package: &#39;rnaturalearthdata&#39; ## The following object is masked from &#39;package:rnaturalearth&#39;: ## ## countries110 library(sf) library(tidyverse) con &lt;- dbConnect(RSQLite::SQLite(), &quot;C:/Users/mldunning/Documents/BUOW_Book/Burrowing_Owls.db&quot;) # Get map data for countries and states world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) us_states &lt;- ne_states(country = &quot;United States of America&quot;, returnclass = &quot;sf&quot;) mexico_states &lt;- ne_states(country = &quot;Mexico&quot;, returnclass = &quot;sf&quot;) canada_provinces &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) # Filter for lower 48 states lower_48 &lt;- subset(us_states, !name %in% c(&quot;Alaska&quot;, &quot;Hawaii&quot;)) query &lt;- &quot;SELECT site, lat, long FROM sites&quot; site_data &lt;- dbGetQuery(con, query) captures_sites &lt;- &quot; SELECT captures.*, -- Select all columns from captures sites.site AS site_from_sites, -- Rename &#39;site&#39; from sites table to avoid conflict sites.lat AS lat_from_sites, -- Rename &#39;lat&#39; from sites table to avoid conflict sites.long AS long_from_sites -- Rename &#39;long&#39; from sites table to avoid conflict FROM captures LEFT JOIN sites ON captures.site = sites.site; &quot; captures_sites &lt;- dbGetQuery(con, captures_sites) ## Warning: Column `claw_2_mm`: mixed type, first seen values of type real, ## coercing other values of type string captures_sites &lt;- captures_sites %&gt;% mutate( latitude = if_else(is.na(lat) &amp; !is.na(lat_from_sites), lat_from_sites, lat), longitude = if_else(is.na(long) &amp; !is.na(long_from_sites), long_from_sites, long) ) # Plot the map ggplot() + # Plot Lower 48 states geom_sf(data = lower_48, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + # Plot Mexico states geom_sf(data = mexico_states, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + # Plot Canada provinces geom_sf(data = canada_provinces, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + geom_point(data = captures_sites, aes(x = longitude, y = latitude), color = &quot;red&quot;, size = 2) + coord_sf(xlim = c(-130, -60), ylim = c(20, 50), expand = FALSE) + labs(title = &quot;Lower 48 States and Mexico&quot;) + theme_minimal() ## Warning: Removed 1764 rows containing missing values or values outside the ## scale range (`geom_point()`). # Step 1: Count the number of observations at each location (latitude, longitude) site_data_count &lt;- captures_sites %&gt;% mutate( latitude = coalesce(lat, lat_from_sites), longitude = coalesce(long, long_from_sites) ) %&gt;% group_by(latitude, longitude) %&gt;% summarize(observations_count = n()) # Count the number of occurrences ## `summarise()` has grouped output by &#39;latitude&#39;. You can override using the ## `.groups` argument. ggplot() + # Plot Lower 48 states geom_sf(data = lower_48, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + # Plot Mexico states geom_sf(data = mexico_states, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + # Plot Canada provinces geom_sf(data = canada_provinces, fill = &quot;whitesmoke&quot;, color = &quot;black&quot;) + # Plot the points from site_data_count with size representing observation count geom_point(data = site_data_count, aes(x = longitude, y = latitude, size = observations_count), color = &quot;red&quot;, alpha = 0.6) + # Adjust map limits coord_sf(xlim = c(-130, -60), ylim = c(20, 55)) + # Set title and theme labs(title = NULL) + theme_minimal() + # Scale size of points based on the number of observations scale_size_continuous(name = &quot;Number of Captures&quot;, range = c(3, 20)) + theme( panel.grid = element_blank(), axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), legend.position = &quot;none&quot;) ## Warning: Removed 1 row containing missing values or values outside the scale ## range (`geom_point()`). 8.2 Sex breakdown of captured owls bands &lt;- dbGetQuery(con, &quot;SELECT * FROM Burrowing_Owls&quot;) sex_counts &lt;- bands %&gt;% count(sex) sex_counts_clean &lt;- sex_counts %&gt;% filter(sex != &quot;C&quot; &amp; !is.na(sex)) # Plot the filtered data ggplot(sex_counts_clean, aes(x = sex, y = n, fill = sex)) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE) + labs(title = &quot;Counts of M, F, and U&quot;, x = &quot;Sex&quot;, y = &quot;Count&quot;) + theme_minimal() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
